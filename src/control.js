const s = {
  "ejs" : ["jsComment", "jsComment", "rangeOuterForm", "eval-js"],
  "ecf" : ["textCurrentForm", "textCurrentForm", "rangeCurrentForm", "eval-current-form"],
  "eof" : ["textOuterForm", "textOuterForm", "rangeOuterForm", "eval-outer-form"],
  "ece" : ["textCurrentExpression", "textCurrentExpression", "rangeCurrentExpression", "eval-current-expression"],
  "lwof" : ["textOuterForm", "textOuterForm", "rangeOuterForm", "log-wrap-outer-form"],
  "lwcf" : ["textCurrentForm", "textCurrentForm", "rangeCurrentForm", "log-wrap-current-form"],
  "lwce" : ["textCurrentExpression", "textCurrentExpression", "rangeCurrentExpression", "log-wrap-current-expression"],
  "rlw" : ["rlw", "rlw", "rlw", "rlw"],
  "rlw-warn" : ["In order to remove a log wrap, you must be inside a logging form that has been generated by one of the repl-repl log wrap commands", "warning"],
  "ece-warn" : ["If you are trying to eval an expression within a form, the cursor must be within the range of an expression.", "warning"],
  "ece-macro-warn" : ["Sorry, but you can not wrap or log a 'clojure.core macro with this extension", "warning"],
  "lwc-e-warn" : ["If you are trying to log wrap an expression within a form, the cursor must be within the range of an expression.", "warning"],
  "ece-outside-warn" : ["If you are trying to eval an expression outside a form, the cursor must be within the range of an expression.", "warning"],
  "lwc-e-outside-warn" : ["If you are trying to log wrap an expression outside a form, the cursor must be within the range of an expression.", "warning"],
  "lw-within-logwrap-warn" : ["You cannot log wrap a value that is currently within a log wrap.", "warning"],
  "ejs-warn" : ["If you are tryin to eval a snippet of js within a (comment :js ...) form, you need to select the js to be evaluated.", "warning"],
  "isBlacklisted" : ["The code you are trying to evaluate is within a comment or ignored form range.", "warning"],
  "isLogWrapped" : ["You cannot evaluate code within a log wrap. Try running 'Repl-Repl: Remove Log Wrap' to first remove the log wrap.", "warning"],
  "inside-fn-warn" : ["You cannot eval forms or expressions inside functions", "warning"]
};

const cf = {
  isInsideForm : {
    isNotJsComment:{
      ecf: {
        isNotInsideFn : "ecf",
        consoleWarning : "inside-fn-warn"
      },
      eof: "eof",
      ece: {
        isPointOnExpression : {
          isNotInsideFn : "ece",
          consoleWarning : "inside-fn-warn"
        },
        consoleWarning : "ece-warn"
      },
      lwcf: "lwcf",
      lwof: "lwof",
      lwce: {
        isPointOnExpression : {
          isNotCoreMacro: "lwce",
          consoleWarning: "ece-macro-warn"
        },
        consoleWarning : "ece-warn"
      },
      rlw: {
        isLogWrapped: "rlw",
        consoleWarning: "rlw-warn"
      }
    },
    isJsComment:{
      ecf: "ejs",
      eof: "ejs",
      ece: "ejs",
      lwcf: "ejs",
      lwof: "ejs",
      lwce: "ejs",
      rlw: "ejs"
    }
  },
  isOutsideForm : {
    isNotBlacklisted :{
      rlw: "rlw-warn",
      ecf: {
        isPointOnExpression : "ece",
        consoleWarning : "ece-outside-warn"
      },
      eof: {
        isPointOnExpression : "ece",
        consoleWarning : "ece-outside-warn"
      },
      ece: {
        isPointOnExpression : "ece",
        consoleWarning : "ece-outside-warn"
      },
      lwcf: {
        isPointOnExpression : "lwce",
        consoleWarning : "lwc-e-outside-warn"
      },
      lwof: {
        isPointOnExpression : "lwce",
        consoleWarning : "lwc-e-outside-warn"
      },
      lwce: {
        isPointOnExpression : "lwce",
        consoleWarning : "lwc-e-outside-warn"
      }
    },
    isBlacklisted: {
      rlw: {
        isStringRange: "rlw-warn",
        isLogWrapped: "rlw",
        consoleWarning: "rlw-warn"
      },
      ecf: {
        isStringRange: "ece",
        isLogWrapped: "isLogWrapped",
        consoleWarning: "isBlacklisted"
      },
      eof: {
        isStringRange: "ece",
        isLogWrapped: "isLogWrapped",
        consoleWarning: "isBlacklisted"
      },
      ece: {
        isStringRange: "ece",
        isLogWrapped: "isLogWrapped",
        consoleWarning: "isBlacklisted"
      },
      lwcf: {
        isStringRange: "lwce",
        isLogWrapped: "lw-within-logwrap-warn",
        consoleWarning: "isBlacklisted"
      },
      lwof: {
        isStringRange: "lwce",
        isLogWrapped: "lw-within-logwrap-warn",
        consoleWarning: "isBlacklisted"
      },
      lwce: {
        isStringRange: "lwce",
        isLogWrapped: "lw-within-logwrap-warn",
        consoleWarning: "isBlacklisted"
      }
    }
  }
}

function controlFlow(state, m){
  const keys = m.consoleWarning ?
    Object.keys(m).filter(key => key!=="consoleWarning") :
    Object.keys(m);

  for(let key of keys){
     // console.log("key", key, "=>", state[key])
    if(state[key]){
      let v = m[key];
       // console.log("v", v)
      if(typeof v === 'object'){
        // console.log("v is object, recursing...")
        return controlFlow(state, v);
      }else if(typeof v === 'string'){
        // console.log("v is string, returning...")
        return v
      }
    }
  }
  return m.consoleWarning;
}

function flow(state){
  return s[controlFlow(state, cf)];
}

exports.flow = flow;
